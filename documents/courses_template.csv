course_code,course_name,institution,level,term,year,status,credits,instructor,workload_hrs,course_description,syllabus_summary,skills_covered,projects_assignments,grade,proof_link,notes,category,delivery_mode,credit_type
CSCI 570,Analysis of Algorithms,University of Southern California,graduate,Spring,2025,completed,4,Prof Shamsian Shahriar,12,"Design and analysis of algorithms including correctness and runtime. Covers greedy, divide-and-conquer, dynamic programming, network flow, approximation, and NP-completeness.","Focuses on understanding fundamental algorithm design techniques, proving correctness, analyzing runtime, and applying advanced concepts like randomization and approximation.","Algorithm design, mathematical reasoning, runtime analysis, divide-and-conquer, dynamic programming, greedy methods, network flow, approximation algorithms, NP-completeness, randomization.","[{'title': 'Homework Series', 'role': 'Student', 'team_size': 1, 'tech': 'Mathematical proofs, pseudocode', 'problem': 'Solve complex algorithm design and analysis problems across six assignments', 'actions': 'Developed proofs, analyzed complexity, applied design techniques', 'outcome': 'Deepened understanding of algorithm analysis and design principles', 'artifacts': 'Submitted assignments via Gradescope'}]",B+,transcript.pdf,Two in-person exams; heavy theory focus; no coding assignments; ~12 hrs/week workload,University,In-person,For-credit
CSCI 585,Database Systems,University of Southern California,graduate,Summer,2025,completed,4,Prof. Saty Raghavachary,12,"Covers design and operation of modern SQL and NoSQL databases, scalability in cloud environments, physical storage, transactional storage managers, and analytics.","Weekly lectures and discussions cover topics such as relational and conceptual modeling, graph databases, physical design, disaggregated DBMS, transactional storage managers, NoSQL systems, benchmarks, memory management, cache-augmented systems, analytics, and MapReduce.","SQL and relational algebra, conceptual and ER modeling, graph query processing, parallel query execution, sharding and load balancing, ACID transactions, concurrency control, crash recovery, NoSQL design, cache and memory management, distributed databases, MapReduce and Spark analytics.","[{'title': 'In-class Participation and Quizzes', 'role': 'Student', 'team_size': 1, 'tech': 'Conceptual modeling, SQL, relational algebra', 'problem': 'Answer conceptual and technical questions in class', 'actions': 'Applied weekly concepts to practical scenarios', 'outcome': 'Reinforced theoretical understanding and practical design skills'}, {'title': 'Exam Preparation and Problem Sets', 'role': 'Student', 'team_size': 1, 'tech': 'Database design and analysis', 'problem': 'Solve DBMS scalability, transaction, and performance questions', 'actions': 'Analyzed real-world system architectures and algorithms', 'outcome': 'Prepared for Exams 1 and 2'}]",A,transcript.pdf,"Two major exams (40% each), class participation (20%); heavy theory with applied discussions; ~12 hrs/week workload; no final project.",University,In-person,For-credit
CSCI 571,Web Technologies,University of Southern California,graduate,Fall,2025,ongoing,4,Dr. Marco Papa,12,"Advanced study of web technologies including client-side and server-side development, cloud services, and mobile applications.","Covers HTML, CSS, JavaScript, HTTP protocols, REST APIs, server-side scripting (Python, NodeJS), mobile development, cloud services (AWS, GCP, Azure), security and privacy, and emerging technologies such as serverless and microservices.","Front-end and back-end web development, REST API design, cloud services setup, responsive web apps, mobile app development (Android, iOS), NoSQL integration, security best practices, microservices, containers.","[{'title': 'Assignment 2: Front-End and Cloud Back-End', 'role': 'Developer', 'team_size': 1, 'tech': 'HTML, CSS, JavaScript, Python, REST APIs', 'problem': 'Create a front-end with cloud integration', 'actions': 'Built responsive UI and implemented cloud-based REST API calls', 'outcome': 'Functional, cloud-integrated web app'}, {'title': 'Assignment 3: Angular and NodeJS', 'role': 'Developer', 'team_size': 1, 'tech': 'Angular, NodeJS, Responsive Design', 'problem': 'Enhance web app with Angular and migrate backend to NodeJS', 'actions': 'Integrated Angular front-end with NodeJS server', 'outcome': 'Responsive and scalable web application'}, {'title': 'Final Project: Mobile Client + Cloud Backend', 'role': 'Full-Stack Developer', 'team_size': 1, 'tech': 'React Native, NodeJS, REST APIs, NoSQL', 'problem': 'Build a mobile app front-end with a cloud-hosted backend', 'actions': 'Developed and deployed a mobile app connected to a NoSQL-backed API', 'outcome': 'Fully functional mobile app with cloud backend integration'}]",N/A,transcript.pdf,"Two written exams (40% each), 3 assignments (20%), final project (8%); ~12 hrs/week workload; heavy hands-on coding focus.",University,In-person,For-credit
CSCI 677,Advanced Computer Vision,University of Southern California,graduate,Fall,2025,ongoing,4,Prof. Ram Nevatia,14,"Comprehensive study of modern computer vision techniques, including both classical model-based approaches and data-driven deep learning methods.","Covers image formation, feature extraction, 3D reconstruction, image classification, object detection, semantic segmentation, activity recognition, and vision-language models. Combines theoretical foundations with practical assignments in Python using OpenCV and PyTorch.","Image geometry and photometry, segmentation and feature extraction, multi-view 3D reconstruction, CNNs and transformers for classification and detection, semantic segmentation (Mask R-CNN, SAM), adversarial attack strategies, video activity recognition, vision-language integration, foundation models like CLIP and GPT-4o.","[{'title': 'Mathematical Assignment', 'role': 'Student', 'team_size': 1, 'tech': 'Mathematical proofs, geometric derivations', 'problem': 'Analyze fundamental concepts in image geometry and photometry', 'actions': 'Solved derivations and analytical problems', 'outcome': 'Built strong theoretical understanding of image formation principles'}, {'title': 'Programming Assignments', 'role': 'Student', 'team_size': 1, 'tech': 'Python, OpenCV, PyTorch', 'problem': 'Implement classical and deep learning methods for computer vision tasks', 'actions': 'Developed and tested code for feature extraction, 3D reconstruction, classification, detection, and segmentation', 'outcome': 'Hands-on experience with modern CV pipelines and architectures'}]",N/A,transcript.pdf,"Two exams (25% each), ~6 assignments (30%), term paper (10%), attendance (10%); ~14 hrs/week workload.",University,In-person,For-credit
CSCI 572,Information Retrieval and Search Engines,University of Southern California,graduate,Spring,2025,completed,4,Prof. Saty Raghavachary,14,"Examines key aspects of information retrieval and their applications in search engines, covering crawling, indexing, querying, ranking, and retrieval quality evaluation.","Topics include fundamentals of search engines, web crawling, indexing, text processing, inverted indexes, query processing, ranking algorithms (including PageRank), search evaluation, information retrieval models, knowledge graphs, advertising models, and modern applications like LLM-powered retrieval and RAG systems.","Information retrieval models, search engine architecture, crawling and deduplication, inverted index construction, query parsing, MapReduce, ranking algorithms (PageRank, BM25), query optimization, autocomplete and autocorrect, knowledge graph integration, classification and clustering, recommendation systems, retrieval-augmented generation (RAG).","[{'title': 'HW1: Search Engines Comparison', 'role': 'Student', 'team_size': 1, 'tech': 'Python, search APIs', 'problem': 'Evaluate and compare multiple commercial search engines', 'actions': 'Collected and analyzed result quality, diversity, and latency metrics', 'outcome': 'Report on strengths and weaknesses of different engines'}, {'title': 'HW2: Web Crawling', 'role': 'Developer', 'team_size': 1, 'tech': 'Python, BeautifulSoup, requests', 'problem': 'Build a focused web crawler', 'actions': 'Implemented URL scheduling, deduplication, and storage logic', 'outcome': 'Functional crawler storing structured data for later indexing'}, {'title': 'HW3: Inverted Index', 'role': 'Developer', 'team_size': 1, 'tech': 'Java/Python, data structures', 'problem': 'Implement an inverted index for fast query retrieval', 'actions': 'Parsed crawled data, built index, supported basic query operations', 'outcome': 'Working search component supporting ranked retrieval'}, {'title': 'HW4: LLM + RAG Integration', 'role': 'Developer', 'team_size': 1, 'tech': 'Python, OpenAI API, vector databases', 'problem': 'Implement retrieval-augmented generation over a custom dataset', 'actions': 'Built pipeline connecting IR component to an LLM for contextual answering', 'outcome': 'Functional prototype demonstrating modern LLM-augmented search capabilities'}]",A,transcript.pdf,"Midterm exam (25%), homework assignments (~50%), participation and quizzes (~5%), final project or wrap-up (~20%); heavy hands-on workload (~14 hrs/week).",University,In-person,For-credit
CS231n,Convolutional Neural Networks for Visual Recognition,Stanford University,graduate,Spring,2024,audited,0,"Prof. Fei-Fei Li, Prof. Justin Johnson, Prof. Serena Yeung",8,"Comprehensive introduction to deep learning for computer vision, focusing on convolutional neural networks (CNNs) and their applications to image classification, detection, segmentation, and beyond.","Covers fundamental deep learning concepts, optimization techniques, CNN architectures (LeNet, AlexNet, VGG, ResNet), recurrent and attention-based models, transfer learning, and generative models. Includes practical guidance on model implementation, debugging, and large-scale training.","Deep learning fundamentals; CNNs; backpropagation; optimization (SGD, Adam); data augmentation; transfer learning; object detection (R-CNN, YOLO, SSD); segmentation (FCN, Mask R-CNN); attention mechanisms; transformers in vision; self-supervised learning; generative models (GANs, VAEs); deployment best practices.","[{'title': 'Assignment 1: Image Classification', 'role': 'Student (auditor)', 'team_size': 1, 'tech': 'Python, NumPy', 'problem': 'Implement basic classifiers (k-NN, SVM, softmax) for CIFAR-10', 'actions': 'Built models from scratch and compared performance', 'outcome': 'Deeper understanding of image ML basics'}, {'title': 'Assignment 2: Training a CNN', 'role': 'Student (auditor)', 'team_size': 1, 'tech': 'Python, PyTorch', 'problem': 'Implement and train a CNN for image recognition', 'actions': 'Used backpropagation and gradient checking to debug models', 'outcome': 'Working CNN achieving good accuracy on CIFAR-10'}, {'title': 'Assignment 3: Detection and Segmentation', 'role': 'Student (auditor)', 'team_size': 1, 'tech': 'Python, PyTorch', 'problem': 'Implement region-based detection and segmentation models', 'actions': 'Experimented with R-CNN pipeline and fully convolutional networks', 'outcome': 'Hands-on experience with detection and segmentation tasks'}]",N/A,N/A,Audited via YouTube/online release; ~8 hrs/week; no credit or grading; assignments practiced locally.,Online,Online,Non-credit
ROS-BEG,"ROS for Beginners 1: Basics, Motion and OpenCV",Udemy,beginner,Self-paced,2023,completed,0,Dr. Anis Koubaa,6,"Introduction to the Robot Operating System (ROS) focusing on the basics of the ecosystem, motion control, and perception with OpenCV.","Covers ROS concepts (nodes, topics, messages, services, actionlib), implementing motion commands, integrating Arduino boards and sensors, and developing simple perception programs using OpenCV within ROS.","ROS nodes; topics; messages; services; actionlib; motion control (linear, rotational, spiral); pose representation; C++ and Python development in ROS; OpenCV basics; Arduino rosserial integration; debugging and environment setup.","[{'title': 'Robot Motion Control', 'role': 'Developer', 'team_size': 1, 'tech': 'ROS, Python, C++', 'problem': 'Simulate cleaning robot motions', 'actions': 'Implemented linear, rotational, and spiral trajectories; published commands via ROS topics', 'outcome': 'Functional simulation of a cleaning robot with multiple motion types'}, {'title': 'Perception with OpenCV', 'role': 'Developer', 'team_size': 1, 'tech': 'ROS, Python, OpenCV', 'problem': 'Capture and process images from robot camera in ROS', 'actions': 'Used ROS image topics with OpenCV to process and visualize images', 'outcome': 'Working perception pipeline for simple vision tasks'}, {'title': 'Arduino Integration', 'role': 'Developer', 'team_size': 1, 'tech': 'ROS, Arduino, rosserial', 'problem': 'Interface Arduino sensors with ROS topics', 'actions': 'Configured rosserial and integrated basic Arduino sensor data streams into ROS topics', 'outcome': 'ROS-Arduino interface functional for sensor integration'}]",N/A,N/A,Hands-on exercises; self-paced.,Online,Online,Non-credit
ROS-LOC,"ROS for Beginners II: Localization, Navigation and SLAM",Udemy,intermediate,Self-paced,2023,completed,0,Dr. Anis Koubaa,8,"Intermediate-level course covering localization, mapping, and navigation using ROS with a practical approach to tf, the navigation stack, and SLAM.","Covers the theoretical foundations of 2D and 3D localization, frame transformations, and implementation using ROS packages like tf, move_base, amcl, and gmapping with demonstrations and programming exercises.","tf usage and frame transformations; 2D/3D localization; SLAM basics (gmapping); navigation stack (move_base, amcl); global and local path planning; collision avoidance; reactive vs map-based navigation; Python and C++ integration in ROS.","[{'title': 'Frame Transformation Exercises', 'role': 'Developer', 'team_size': 1, 'tech': 'ROS, tf', 'problem': 'Implement transformations between coordinate frames', 'actions': 'Used tf utilities to broadcast and listen to transforms', 'outcome': 'Strong understanding of tf transformations for localization'}, {'title': 'Navigation Stack Implementation', 'role': 'Developer', 'team_size': 1, 'tech': 'ROS, move_base, amcl', 'problem': 'Set up and test the navigation stack for a simulated robot', 'actions': 'Configured localization, global planner, and local planner parameters', 'outcome': 'Working simulation with collision avoidance'}, {'title': 'SLAM Integration', 'role': 'Developer', 'team_size': 1, 'tech': 'ROS, gmapping', 'problem': 'Map an unknown environment using SLAM', 'actions': 'Collected sensor data, ran gmapping node, generated occupancy grid maps', 'outcome': 'Usable maps for navigation tasks'}]",N/A,N/A,Hands-on programming projects; self-paced.,Online,Online,Non-credit
KF-SF,Kalman Filters and Sensor Fusion,Udemy,advanced,Self-paced,2025,completed,0,Steven Dumble,8,"Comprehensive course on Kalman Filtering and Sensor Fusion, focusing on implementing linear, extended, and unscented Kalman filters for autonomous vehicles in C++.","Covers probability foundations, linear systems, sensor error modeling, tuning, fault detection, and practical C++ implementations for tracking and sensor fusion in autonomous vehicle simulations.",Linear Kalman Filter (LKF); Extended Kalman Filter (EKF); Unscented Kalman Filter (UKF); multi-rate sensor fusion; filter tuning and initialization; sensor error modeling; fault detection; C++ simulation coding.,"[{'title': '2D Tracking with Linear Kalman Filter', 'role': 'Developer', 'team_size': 1, 'tech': 'C++', 'problem': 'Estimate position and velocity of a 2D target', 'actions': 'Implemented LKF with prediction and correction; tested with simulated data', 'outcome': 'Accurate tracking of simulated target'}, {'title': 'Autonomous Vehicle EKF Implementation', 'role': 'Developer', 'team_size': 1, 'tech': 'C++', 'problem': 'Fuse lidar and radar data for state estimation', 'actions': 'Handled nonlinear measurement models; tuned process/measurement noise', 'outcome': 'Stable and accurate vehicle localization'}, {'title': 'Unscented Kalman Filter Capstone', 'role': 'Developer', 'team_size': 1, 'tech': 'C++', 'problem': 'Implement UKF for nonlinear state estimation', 'actions': 'Coded sigma-point generation, prediction, update with tuning', 'outcome': 'Improved handling of nonlinearities and noise'}]",N/A,N/A,Completed self-paced; used in robotics projects.,Online,Online,Non-credit